##########################################################################
# Risk Parity Portfolio Optimization - a robust numerical approach
# Implementation of Newton algorithm in an eigenvector-eigenvalue framework
##########################################################################
# The F and Jinv functions below are needed for the Newton algorithm
# N-dimensional portfolio weights vector plus the unknown lamda scalar

# F function
F = function(y,V){
n = length(y)
wts = as.matrix(y[-n])
lambda = y[n]
rbind(V%*%wts-lambda/wts,sum(wts)-1)
}

# Jinv function
Jinv = function(y,V){
n = length(y)
wts = as.matrix(y[-n])
lambda = y[n]
J = rbind(cbind(V+lambda*diag(as.numeric(1/wts^2)),-1/wts),c(rep(1,p),0))
solve(J)
}

# J function - not needed for Newton algorithm but can use to check Jinv
J = function(y,V){
n = length(y)
wts = as.matrix(y[-n])
lambda = y[n]
rbind(cbind(V+lambda*diag(as.numeric(1/wts^2)),-1/wts),c(rep(1,p),0))
}

# Set initial weights and compute covariance matrix
p = ncol(ret)
wts.init = matrix(rep(1/p,p))
V = var(ret)
port.var = t(wts.init)%*%V%*%wts.init
lambda.init = as.numeric(port.var/p)
y.init = rbind(wts.init,lambda.init)

Newton <- function(y.init) {
  norm.diff <- .1
  tol <- .0001
  y.old <- y.init
  while(norm.diff>tol) {
    norm1 <- norm(y.old)
    y.new <- y.old-Jinv(y.old,V)%*%F(y.old,V)    
    norm2 <- norm(y.new)  
    norm.diff <- abs(norm2-norm1)    
    y.old <- y.new
    }
  return(y.new)
}

(wts.new <- Newton(y.init)[-6])
(lambda.new <- Newton(y.init)[6])

(lambda.new*p)
(V.new <- t(wts.new)%*%V%*%wts.new)

wts <- c(.4,.05,.25,.2,.1)                                        #Example weights
mu.assets = apply(ret, 2, mean)
mu.MCTRport = as.numeric(t(wts)%*%as.matrix(mu.assets,ncol=1))
mu.RPport = as.numeric(t(wts.new)%*%as.matrix(mu.assets,ncol=1))
port.MCTRsigma = sqrt(as.numeric(port.var))
port.RPsigma = sqrt(as.numeric(V.new))
sr.MCTRport = mu.MCTRport/port.MCTRsigma
sr.RPport = mu.RPport/port.RPsigma

# Compute MCTR
port.sigma = sqrt(as.numeric(port.var))
mctr = V%*%wts/port.sigma
round(t(mctr),3)
barplot(mctr[,1],names = tickers,ylab = "MCTR",col = "blue")
title(main = "MARGINAL CONTRIBUTION TO RISK")

# Compute PCTR
pctr = 100*wts*mctr/port.sigma
round(t(pctr),3)
sum(pctr)
barplot(pctr[,1],names = tickers,ylab = "PERCENT",col = "blue")
title(main = "PERCENTAGE CONTRIBUTION TO RISK")
