# Interactive table performance metrics implemented in PerformanceAnaltyics
###############################################################################

SharpeRatio <- function (R, Rf = 0, p = 0.95, method = c("StdDev", "VaR", "ES"), 
		weights = NULL, annualize = FALSE, ...) 
{
	R = checkData(R)
	
	method <- match.arg(method)
	
	if (!is.null(dim(Rf))) 
		Rf = checkData(Rf)
	if (annualize) {
		freq = periodicity(R)
		switch(freq$scale, minute = {
					stop("Data periodicity too high")
				}, hourly = {
					stop("Data periodicity too high")
				}, daily = {
					scale = 252
				}, weekly = {
					scale = 52
				}, monthly = {
					scale = 12
				}, quarterly = {
					scale = 4
				}, yearly = {
					scale = 1
				})
	}
	else {
		scale = 1
	}
	srm <- function(R, ..., Rf, p, FUNC) {
		FUNCT <- match.fun(FUNC)
		xR = Return.excess(R, Rf)
		SRM = mean(xR, na.rm = TRUE)/FUNCT(R = R, p = p, ... = ..., 
				invert = FALSE)
		SRM
	}
	sra <- function(R, ..., Rf, p, FUNC) {
		if (FUNC == "StdDev") 
			FUNC = "StdDev.annualized"
		FUNCT <- match.fun(FUNC)
		xR = Return.excess(R, Rf)
		SRA = Return.annualized(xR)/FUNCT(R = R, p = p, ... = ..., 
				invert = FALSE)
		SRA
	}
	i = 1
	if (is.null(weights)) {
		result = matrix(nrow = length(method), ncol = ncol(R))
		colnames(result) = colnames(R)
	}
	else {
		result = matrix(nrow = length(method))
	}
	tmprownames = vector()
	
	for (FUNCT in method) {
		if (is.null(weights)) {
			if (annualize) 
				result[i, ] = sapply(R, FUN = sra, Rf = Rf, p = p, 
						FUNC = FUNCT, ...)
			else result[i, ] = sapply(R, FUN = srm, Rf = Rf, 
						p = p, FUNC = FUNCT, ...)
		}
		else {
			result[i, ] = mean(R %*% weights, na.rm = TRUE)/match.fun(FUNCT)(R, 
					Rf = Rf, p = p, weights = weights, portfolio_method = "single", 
					... = ...)
		}
		tmprownames = c(tmprownames, paste(if (annualize) "Annualized ", 
						FUNCT, " Sharpe", " (Rf=", round(scale * mean(Rf) * 
										100, 1), "%, p=", round(p * 100, 1), "%):", sep = ""))
		i = i + 1
	}
	rownames(result) = tmprownames
	return(result)
}

table.Performance.pool.cran <- function(...){
	c(		"AdjustedSharpeRatio", 
			"AverageDrawdown", 
			"BernardoLedoitRatio", 
			"BurkeRatio", 
			"CalmarRatio", 
			"CVaR", 
			"DownsideDeviation", 
			"DownsideFrequency", 
			"DownsidePotential", 
			"DRatio", 
			"DrawdownDeviation", 
			"ES", 
			"ETL", 
			"Frequency", 
			"KellyRatio",
			"kurtosis", 
			"MartinRatio", 
			"maxDrawdown", 
			"mean.geometric", 
			"mean.LCL", 
			"mean.stderr", 
			"mean.UCL", 
			"MeanAbsoluteDeviation", 
			"Omega", 
			"OmegaSharpeRatio", 
			"PainIndex", 
			"PainRatio", 
			"Return.annualized", 
			"Return.cumulative", 
			"sd.annualized", 
			"sd.multiperiod", 
			"SemiDeviation", 
			"SemiVariance", 
			"SharpeRatio",
			"SharpeRatio.annualized", 
			"skewness", 
			"SkewnessKurtosisRatio", 
			"SmoothingIndex", 
			"SortinoRatio", 
			"StdDev", 
			"StdDev.annualized", 
			"SterlingRatio", 
			"UPR", 
			"UpsideFrequency", 
			"UpsidePotentialRatio", 
			"UpsideRisk", 
			"VaR", 
			"VolatilitySkewness")
	
}

table.Performance.pool <- function(...){
	c(
			"AdjustedSharpeRatio", 
			"AverageDrawdown", 
			"AverageRecovery", 
			"BernardoLedoitRatio", 
			"BurkeRatio", 
			"CalmarRatio", 
			"CVaR", 
			"DownsideDeviation", 
			"DownsideFrequency", 
			"DownsidePotential", 
			"DRatio", 
			"DrawdownDeviation", 
			"ES", 
			"ETL", 
			"Frequency", 
			"HurstIndex", 
			"KellyRatio",
			"kurtosis", 
			"lpm", 
			"MartinRatio", 
			"maxDrawdown", 
			"mean.geometric", 
			"mean.LCL", 
			"mean.stderr", 
			"mean.UCL", 
			"MeanAbsoluteDeviation", 
			"Omega", 
			"OmegaSharpeRatio", 
			"PainIndex", 
			"PainRatio", 
			"Return.annualized", 
			"Return.cumulative", 
			"sd.annualized", 
			"sd.multiperiod", 
			"SemiDeviation", 
			"SemiVariance", 
			"SharpeRatio",
			"SharpeRatio.annualized", 
			"skewness", 
			"SkewnessKurtosisRatio", 
			"SmoothingIndex", 
			"SortinoRatio", 
			"StdDev", 
			"StdDev.annualized", 
			"SterlingRatio", 
			"UlcerIndex", 
			"UpsideFrequency", 
			"UpsidePotentialRatio", 
			"UpsideRisk", 
			"VaR", 
			"VolatilitySkewness")
}

table.Performance <- function(R,metrics=NULL,metricsNames=NULL, verbose=FALSE,...){
	pool <- table.Performance.pool()
	
#	Extract metric functions' arguments
	ArgFormals <- lapply(pool,function(x)formals(x))
	ArgNames <- lapply(ArgFormals,function(x)names(x))
	ArgString.temp <- unique(unlist(ArgNames))
	ArgString <- sort(ArgString.temp[-which(ArgString.temp%in%c("R","x","..."))])	
	
	metrics.vec <- data.frame(
			metrics=pool,
			include=rep(0,length(pool)),
			metricsNames=pool,
			stringsAsFactors=FALSE)
	
	
#	Loop through each metric and input the default values of args
	for (i in paste0("arg_",ArgString))
		eval(parse(text=paste0("metrics.vec$",i,"<- '#'")))
	
	
	for (i in 1:length(pool)){
#		i=1
		ArgFormals.i <- ArgFormals[[i]]
		ArgNames.use.i <- names(ArgFormals.i)
		
		for (ii in ArgString){
#		ii=ArgString[1]
			if(any(ArgNames.use.i%in%ii)){
				temp <- ArgFormals.i[which(ArgNames.use.i==ii)]
				temp <- ifelse(class(temp[[1]])%in%c("call","NULL"),as.character(temp),temp) 
				metrics.vec[i,paste0("arg_",ii)] <- temp
			}  
		}
	}
#	Promote the order of pre-specified metric
	if(length(metrics)>0){
		metrics.vec$include[match(metrics,metrics.vec$metrics)] <- 1
		if(is.null(metrics.vec$metricsNames))
			metrics.vec$metricsNames[match(metrics,metrics.vec$metrics)] <- metricsNames
		metrics.vec <- metrics.vec[order(metrics.vec$include,decreasing=T),]
	}
#	Open data editor	
	metrics.vec <- fix(metrics.vec) #allow user to change the input
	
# Process the selected metrics and args	
	metrics.choose <- subset(metrics.vec,include==1)
	if(nrow(metrics.choose)==0) stop("please specify as least one metric")
	colnames(metrics.choose) <- gsub("arg_","",colnames(metrics.choose))
	metrics <- as.character(metrics.choose$metrics)
	metricsNames <-  as.character(metrics.choose$metricsNames)
	metricsOptArgVal <- 
			lapply(1:nrow(metrics.choose[,-c(1:3),drop=FALSE]),function(x){
#						x=2
						xx <- metrics.choose[x,-c(1:3),drop=FALSE]
						xx[is.na(xx)] <- "NA"
						xy <- as.vector(xx[xx!='#'])
						names(xy) <-  names(xx)[xx!='#']
						xy})
	
	
	names(metricsOptArgVal) <- metrics
	
# Functions to call each metric function with user input args	
	table.Arbitrary.m <- function(...){
		y = checkData(R, method = "zoo")
		columns = ncol(y)
		rows = nrow(y)
		columnnames = colnames(y)
		rownames = rownames(y)
		Arg.mat <- list()
		for (column in 1:columns) {
#			 column=1
			x = as.matrix(y[, column])
			values = vector("numeric", 0)
			for (metric in metrics) {
#			 metric=metrics[1]
				ArgString.i <- paste(names(metricsOptArgVal[[metric]]),metricsOptArgVal[[metric]],sep=" = ")
				Arg.mat[[metric]] <- ArgString.i
				ArgString.i <- paste(ArgString.i,collapse =", ")
				if(length(ArgString.i)>0 & nchar(ArgString.i)>0)
					newvalue = eval(parse(text=paste0("apply(x, MARGIN = 2, FUN = metric,",ArgString.i,")"))) else
					newvalue = apply(x, MARGIN = 2, FUN = metric) #...
				values = c(values, newvalue)
			}
			if (column == 1) {
				resultingtable = data.frame(Value = values, row.names = metricsNames)
			}
			else {
				nextcolumn = data.frame(Value = values, row.names = metricsNames)
				resultingtable = cbind(resultingtable, nextcolumn)
			}
		}
		names(Arg.mat) <- metrics
		colnames(resultingtable) = columnnames
		return(list(resultingtable=resultingtable,
						Arg.mat=Arg.mat))
	}
	
#	Generate the table	
	res <- table.Arbitrary.m(...)
	if(verbose){
		cat("###################################","\n")
		cat("metrics:\n")
		print(metrics)
		cat("###################################","\n")
		cat("metricsNames:\n")
		print(metricsNames)
		cat("###################################","\n")
		cat("metricsOptArg:\n")
		cat("Attention: for more than one element in args, \n only the first one will be used","\n")
		print(res$Arg.mat)
		cat("###################################","\n")
		cat("table:\n")
		print(res$resultingtable)
	}
	
	return(res)
}
###################################Example###################################
library(PerformanceAnalytics,lib="C:/R/R-3.0.3/library_forge")
data(edhec)

# Example 1: start with NULL specification
res <- table.Performance(R=edhec,verbose=T)
# Example 2: start with Var and ES
#res <- table.Performance(edhec,metrics=c("VaR", "ES"),metricsNames=c("Modified VaR","Modified Expected Shortfall"),verbose=T)
